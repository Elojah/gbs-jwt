// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/elojah/gbs-jwt/cmd/secrets/grpc/secrets.proto

package grpc

import (
	context "context"
	fmt "fmt"
	jwt "github.com/elojah/gbs-jwt/pkg/jwt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("github.com/elojah/gbs-jwt/cmd/secrets/grpc/secrets.proto", fileDescriptor_c27a9c35e80b1cd0)
}
func init() {
	golang_proto.RegisterFile("github.com/elojah/gbs-jwt/cmd/secrets/grpc/secrets.proto", fileDescriptor_c27a9c35e80b1cd0)
}

var fileDescriptor_c27a9c35e80b1cd0 = []byte{
	// 286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x8e, 0x31, 0x4e, 0xc3, 0x30,
	0x14, 0x86, 0xfd, 0xa4, 0xaa, 0x48, 0x61, 0x40, 0xf2, 0xc0, 0x10, 0xa4, 0x37, 0x44, 0x6c, 0xa8,
	0xb6, 0x80, 0x85, 0x19, 0xca, 0xc6, 0x86, 0x38, 0x40, 0x93, 0x1a, 0xb7, 0x21, 0x91, 0xad, 0xc4,
	0x55, 0xc5, 0xc6, 0x11, 0x38, 0x06, 0x47, 0x80, 0xad, 0x23, 0x63, 0xc6, 0x8e, 0xc4, 0x59, 0x18,
	0x3b, 0x32, 0x22, 0xdb, 0x54, 0x44, 0x48, 0x15, 0x93, 0xfd, 0xbf, 0xf7, 0xfd, 0xf6, 0x17, 0x5d,
	0xc8, 0xb9, 0x99, 0x2d, 0x52, 0x96, 0xa9, 0x92, 0x8b, 0x42, 0xe5, 0x93, 0x19, 0x97, 0x69, 0x3d,
	0xca, 0x97, 0x86, 0x67, 0xe5, 0x94, 0xd7, 0x22, 0xab, 0x84, 0xa9, 0xb9, 0xac, 0x74, 0xb6, 0x0d,
	0x4c, 0x57, 0xca, 0x28, 0x3a, 0x70, 0xb3, 0x78, 0xd4, 0xeb, 0x4b, 0x25, 0x15, 0xf7, 0xcb, 0x74,
	0x71, 0xef, 0x93, 0x0f, 0xfe, 0x16, 0x4a, 0xf1, 0x91, 0x54, 0x4a, 0x16, 0xe2, 0x97, 0x12, 0xa5,
	0x36, 0x8f, 0x3f, 0xcb, 0x93, 0xdd, 0x2e, 0xfa, 0x41, 0x72, 0x77, 0xe6, 0x4b, 0x13, 0xe0, 0xb3,
	0x37, 0x88, 0xf6, 0x6e, 0x83, 0x10, 0x3d, 0x8e, 0x86, 0x57, 0x95, 0x98, 0x18, 0x41, 0xf7, 0x99,
	0x23, 0xc2, 0x3c, 0xee, 0x87, 0x84, 0x38, 0xea, 0x4e, 0x4f, 0xff, 0xa3, 0x78, 0x34, 0x1c, 0x8b,
	0x42, 0xfc, 0xa5, 0x0e, 0x59, 0x30, 0x67, 0x5b, 0x73, 0x76, 0xed, 0xcc, 0x13, 0x42, 0x4f, 0xa3,
	0xc1, 0xcd, 0xbc, 0x36, 0x74, 0x07, 0x11, 0x1f, 0xf4, 0x9e, 0x71, 0x60, 0x42, 0x2e, 0xc7, 0x4d,
	0x8b, 0x64, 0xdd, 0x22, 0xd9, 0xb4, 0x08, 0x5f, 0x2d, 0xc2, 0x93, 0x45, 0x78, 0xb1, 0x08, 0xaf,
	0x16, 0x61, 0x65, 0x11, 0xde, 0x2d, 0x42, 0x63, 0x11, 0x3e, 0x2c, 0xc2, 0xa7, 0x45, 0xb2, 0xb1,
	0x08, 0xcf, 0x1d, 0x92, 0x55, 0x87, 0xd0, 0x74, 0x48, 0xd6, 0x1d, 0x92, 0x74, 0xe8, 0x3f, 0x3a,
	0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x56, 0x79, 0xc7, 0xfb, 0xc3, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SecretsClient is the client API for Secrets service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SecretsClient interface {
	// Create a new Secret
	// The claims provided in the Secret will be added into the jwt token.
	// If provided, the "exp" claim overrides the one assigned by default. If not, the token is
	// given the service's default validity period.
	Create(ctx context.Context, in *jwt.Secret, opts ...grpc.CallOption) (*jwt.Secret, error)
	// Update a new Secret.
	// If provided, the jwt's claims are updated.
	// If no "exp" claim is provided, the secret is renewed with the service's default validity period.
	Update(ctx context.Context, in *jwt.Secret, opts ...grpc.CallOption) (*jwt.Secret, error)
	// Delete a secret with given name.
	// Claims are ignored.
	Delete(ctx context.Context, in *jwt.Secret, opts ...grpc.CallOption) (*types.Empty, error)
	// List all existing secrets.
	List(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*jwt.SecretList, error)
}

type secretsClient struct {
	cc *grpc.ClientConn
}

func NewSecretsClient(cc *grpc.ClientConn) SecretsClient {
	return &secretsClient{cc}
}

func (c *secretsClient) Create(ctx context.Context, in *jwt.Secret, opts ...grpc.CallOption) (*jwt.Secret, error) {
	out := new(jwt.Secret)
	err := c.cc.Invoke(ctx, "/grpc.Secrets/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsClient) Update(ctx context.Context, in *jwt.Secret, opts ...grpc.CallOption) (*jwt.Secret, error) {
	out := new(jwt.Secret)
	err := c.cc.Invoke(ctx, "/grpc.Secrets/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsClient) Delete(ctx context.Context, in *jwt.Secret, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/grpc.Secrets/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsClient) List(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*jwt.SecretList, error) {
	out := new(jwt.SecretList)
	err := c.cc.Invoke(ctx, "/grpc.Secrets/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecretsServer is the server API for Secrets service.
type SecretsServer interface {
	// Create a new Secret
	// The claims provided in the Secret will be added into the jwt token.
	// If provided, the "exp" claim overrides the one assigned by default. If not, the token is
	// given the service's default validity period.
	Create(context.Context, *jwt.Secret) (*jwt.Secret, error)
	// Update a new Secret.
	// If provided, the jwt's claims are updated.
	// If no "exp" claim is provided, the secret is renewed with the service's default validity period.
	Update(context.Context, *jwt.Secret) (*jwt.Secret, error)
	// Delete a secret with given name.
	// Claims are ignored.
	Delete(context.Context, *jwt.Secret) (*types.Empty, error)
	// List all existing secrets.
	List(context.Context, *types.Empty) (*jwt.SecretList, error)
}

// UnimplementedSecretsServer can be embedded to have forward compatible implementations.
type UnimplementedSecretsServer struct {
}

func (*UnimplementedSecretsServer) Create(ctx context.Context, req *jwt.Secret) (*jwt.Secret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedSecretsServer) Update(ctx context.Context, req *jwt.Secret) (*jwt.Secret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedSecretsServer) Delete(ctx context.Context, req *jwt.Secret) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedSecretsServer) List(ctx context.Context, req *types.Empty) (*jwt.SecretList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

func RegisterSecretsServer(s *grpc.Server, srv SecretsServer) {
	s.RegisterService(&_Secrets_serviceDesc, srv)
}

func _Secrets_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(jwt.Secret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Secrets/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsServer).Create(ctx, req.(*jwt.Secret))
	}
	return interceptor(ctx, in, info, handler)
}

func _Secrets_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(jwt.Secret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Secrets/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsServer).Update(ctx, req.(*jwt.Secret))
	}
	return interceptor(ctx, in, info, handler)
}

func _Secrets_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(jwt.Secret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Secrets/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsServer).Delete(ctx, req.(*jwt.Secret))
	}
	return interceptor(ctx, in, info, handler)
}

func _Secrets_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Secrets/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsServer).List(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Secrets_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Secrets",
	HandlerType: (*SecretsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Secrets_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Secrets_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Secrets_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Secrets_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/elojah/gbs-jwt/cmd/secrets/grpc/secrets.proto",
}
